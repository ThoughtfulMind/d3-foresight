#+TITLE: D3-foresight documentation

#+OPTIONS: toc:nil title:nil num:nil html-postamble:nil
#+OPTIONS: html5-fancy:t
#+HTML_DOCTYPE: html5
#+MACRO: js #+HTML_HEAD: <script src="$1"></script>
#+MACRO: css #+HTML_HEAD: <link rel="stylesheet" href="$1" />
#+MACRO: badge @@html:<a href="$1" class="image-link"><img src="$2" /></a>@@

{{{js(https://d3js.org/d3.v4.min.js)}}}
{{{js(https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js)}}}
{{{js(./assets/d3-foresight.min.js)}}}
{{{js(./assets/script.js)}}}

{{{css(https://fonts.googleapis.com/css?family=Merriweather:900\,900italic\,300\,300italic)}}}
{{{css(https://fonts.googleapis.com/css?family=Open+Sans:400\,300\,800)}}}
{{{css(https://fonts.googleapis.com/css?family=Fira+Mono)}}}
{{{css(./assets/css/main.css)}}}
{{{css(./assets/css/overrides.css)}}}
{{{css(./assets/fontello/fontello.css)}}}

#+HTML: <div class="page-header">
@@html:   <div class="page-meta small">Document last updated@@ {{{time(%Y-%m-%d %a %H:%M)}}}@@html:</div>@@
#+HTML:   <h1>D3 <em>Foresight</em></h1>
#+HTML: </div>

{{{badge(https://travis-ci.org/reichlab/d3-foresight,https://img.shields.io/travis/reichlab/d3-foresight/master.svg?style=for-the-badge)}}}
{{{badge(https://www.npmjs.com/package/d3-foresight,https://img.shields.io/npm/v/d3-foresight.svg?style=for-the-badge)}}}
{{{badge(https://www.npmjs.com/package/d3-foresight,https://img.shields.io/npm/l/d3-foresight.svg?style=for-the-badge)}}}
{{{badge(https://github.com/reichlab/d3-foresight/issues,https://img.shields.io/github/issues/reichlab/d3-foresight.svg?style=for-the-badge)}}}

{{{badge(https://github.com/feross/standard,https://cdn.rawgit.com/feross/standard/master/badge.svg)}}}

D3 Foresight is a [[https://github.com/d3/d3][d3]] based library for visualizing time series forecasts
interactively. At a /time point/, a general time series model trying to predict a
single variable series (like temperature) makes forecasts for some time points
in the future with some uncertainty described by probability distributions.
Other than these predictions, it might also provide an estimate of /peak/ and some
/onset/outbreak/ point (as defined by a baseline). The visualizations in this
library try to cover these cases. See [[http://reichlab.io/flusight][reichlab/flusight]] for a demo.

#+TOC: headlines 2

* Setting up

The library requires [[https://d3js.org/][d3]] and [[https://momentjs.com][momentjs]] as external dependencies. To build
foresight itself, use ~npm compile~ (for ~./dist/d3-foresight.js~) or ~npm build~ (for
~./dist/d3-foresight.min.js~). The library is also available on npm as
[[https://www.npmjs.com/package/d3-foresight][d3-foresight]]. For browser, include these in your html:

#+BEGIN_EXAMPLE
  <script src="https://d3js.org/d3.v4.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
  <script src="./dist/d3-foresight.min.js"></script>
  ;; Or use the unpkg url
  <script src="https://unpkg.com/d3-foresight"></script>
#+END_EXAMPLE

Additionally, a few icons (in the legend) have an icon font dependency. The css
for that can be added using:

#+BEGIN_EXAMPLE
<link rel="stylesheet" href="./assets/fontello/fontello.css" />
#+END_EXAMPLE

#+BEGIN_SRC js :tangle ./assets/script.js :exports none
  document.addEventListener("DOMContentLoaded", function () {
#+END_SRC

* TimeChart

A ~TimeChart~ displays the time series to be predicted and the models'
predictions. Beyond the very minimal plots involving only model forecasts, it
can show the following items:

- The actual time series to be predicted.
- The /observed/ time series. This might be different from the actual series if
  the truth is revised (e.g. due to reporting delays in the incident count for
  certain disease).
- Baseline value for the year/season.
- History of the series over some past years/seasons.
- Additional prediction information from models like
  + Confidence intervals
  + Peak and onset prediction

#+CAPTION: ~TimeChart~ shows model predictions and the actual time series
[[file:./timechart.png]]

** Basic plot
In this section, we will create a very basic visualization involving one model
providing random numbers as forecasts for a year.

*** Configuration
Time in foresight is represented using ~timePoints~ which is an array mapping to
discrete date/time values. As of now, foresight supports the following two type
of time points:

1. ~regular-week~
2. ~mmwr-week~ based on [[https://wwwn.cdc.gov/nndss/document/MMWR_Week_overview.pdf][MMWR definitions]]

Both are /week/ based points and are represented as objects like shown:

#+BEGIN_SRC json
  {
    week: 20,
    year: 2016
  }
#+END_SRC

Lets work on mmwr weeks for the year 2016. Our week choice can be passed to
foresight charts using a config object which is the following in our case:

#+BEGIN_SRC js :tangle ./assets/script.js
  let config = {
    pointType: 'mmwr-week', // Default is regular-week
    axes: {
      y: {
        title: 'Random numbers' // Title for the y axis
      }
    }
  }
#+END_SRC

*** Data
At minimum, ~TimeChart~ expects an array of time points and an array of model
data. The time points in our case go from week 1 to week 52 of 2016 and can be
represented as:

#+BEGIN_SRC js :tangle ./assets/script.js
  let timePoints = [...Array(51).keys()].map(w => {
    return { week: w + 1, year: 2016 }
  })
#+END_SRC

At each time point, our model provides predictions for the next 10 time points.
These predictions are represented in an array of same size as the time points.
For when the model has no predictions, we put in ~null~.

#+BEGIN_SRC js :tangle ./assets/script.js
  // Random sequence generator
  function rseq (n) {
    let seq = [Math.random()]
    for (let i = 1; i < n; i++) {
      seq.push(Math.random() * (1 + seq[i - 1]))
    }
    return seq
  }

  // Predictions look like [{ series: [{ point: 0.5 }, { point: 1.2 } ...] }, ..., null, null]
  let predictions = timePoints.map(tp => {
    if (tp.week > 30) {
      // We only predict upto week 30
      return null
    } else {
      // Provide 10 week ahead predictions
      return {
        series: rseq(10).map(r => { return { point: r } })
      }
    }
  })
#+END_SRC

Finally we put everything together in a single object. Notice the extra metadata
involved in putting together the values for the model:

#+BEGIN_SRC js :tangle ./assets/script.js
  let data = {
    timePoints,
    models: [
      {
        id: 'mod',
        meta: {
          name: 'Name',
          description: 'Model description here',
          url: 'http://github.com'
        },
        predictions
      }
    ]
  }
#+END_SRC

*** Plotting
The life cycle of ~TimeChart~ involves the following stages:

1. Initialization
2. Plotting
3. Updating

#+BEGIN_SRC js :tangle ./assets/script.js
  // 1. Initialize
  // Setup the id of div where we are going to plot
  // Also pass in config options
  let timeChart = new d3Foresight.TimeChart('#timechart', config)

  // 2. Plot
  // Provide the data for the complete year
  timeChart.plot(data)

  // 3. Update
  // Move to the given index in the set of timePoints
  timeChart.update(10)
  // Or simply use
  // timeChart.moveForward()
  // timeChart.moveBackward()

  // Lets also save the timechart object in global namespace
  window.timeChart = timeChart
#+END_SRC

#+HTML: <br><br>
#+HTML: <div id="timechart"></div>

If you are able to see the plot above (which you should be, else file an [[https://github.com/reichlab/d3-foresight/issues][issue]]),
you should be able to move around by clicking the arrow buttons in legend or
clicking on the chart itself. These mouse click events can trigger user defined
functions too. See the section on [[Hooks]] for more description.

** Adding components
This section builds up on the chart above to add more information

*** Baseline
A baseline is a horizontal line specifying some sort of baseline. To plot it,
pass a ~baseline~ item in data. Optionally, set a label for the baseline by
providing it in the ~config~.

#+BEGIN_SRC js :tangle ./assets/script.js :exports none
  let copy = it => Object.assign({}, it)
#+END_SRC

#+BEGIN_SRC js :tangle ./assets/script.js
  let tcBaseline = new d3Foresight.TimeChart('#tc-baseline', Object.assign(copy(config), {
    baseline: {
      text: 'Baseline', // To show multiline text, pass an array of strings,
      description: 'This is a sample baseline',
      url: 'https://github.com'
    }
  }))
  tcBaseline.plot(Object.assign(copy(data), {
    baseline: 0.3
  }))
  tcBaseline.update(10)
#+END_SRC

#+HTML: <br><br>
#+HTML: <div id="tc-baseline"></div>

*** Actual
Another important component to show is the actual line that we are trying to
predict. The ~actual~ series is an array of the same length as the ~timePoints~ and
can be something like this

#+BEGIN_SRC js :tangle ./assets/script.js
  // Suppose we have actual data for 20 time steps only. We give null for other points
  let actual = rseq(20).concat(timePoints.slice(20).map(tp => null))
#+END_SRC

#+BEGIN_SRC js :tangle ./assets/script.js
  let tcActual = new d3Foresight.TimeChart('#tc-actual', config)
  tcActual.plot(Object.assign(copy(data), { actual: actual }))
  tcActual.update(10)
#+END_SRC

#+HTML: <br><br>
#+HTML: <div id="tc-actual"></div>

*** TODO Observed

*** TODO History

*** TODO Confidence Intervals

*** TODO Peak and Onset

** TODO All config and data options

* TODO DistributionChart

#+CAPTION: ~DistributionChart~ displays probability distributions for the
#+CAPTION: prediction targets
[[file:./distchart.png]]

* Hooks

Charts can call user defined functions when movement events are triggered inside
(e.g. by clicking on movement buttons or clicking on the overlay). To register
your functions to be called on these events, you can use ~addHook~.

#+BEGIN_SRC js
  timeChart.addHook(d3Foresight.events.JUMP_TO_INDEX, index => {
    // This is triggered when an event moves the
    // visualization to certain `index` in `timePoints`

    // Current index is `timeChart.currentIdx`
    console.log('chart moved to ' + index)
  })
#+END_SRC

~addHook~ returns a subscription token which can then be used to revoke that
hook using ~removeHook~.

#+BEGIN_SRC js
  let token = timeChart.addHook(
    d3Foresight.events.JUMP_TO_INDEX,
    index => console.log(`Now at ${index}`)
  )
  timeChart.removeHook(token)
#+END_SRC


#+BEGIN_SRC js :tangle ./assets/script.js :exports none
})
#+END_SRC

#+HTML: <br><br>
