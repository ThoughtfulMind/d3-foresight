#+TITLE: D3-foresight documentation

#+OPTIONS: toc:nil title:nil num:nil html-postamble:nil
#+MACRO: js #+HTML_HEAD: <script src="$1"></script>
#+MACRO: css #+HTML_HEAD: <link rel="stylesheet" href="$1" />
#+MACRO: badge @@html:<a href="$1" class="image-link"><img src="$2" /></a>@@

{{{js(https://d3js.org/d3.v4.min.js)}}}
{{{js(https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js)}}}
{{{js(./assets/d3-foresight.js)}}}
{{{js(./assets/script.js)}}}

{{{css(https://fonts.googleapis.com/css?family=Merriweather:900\,900italic\,300\,300italic)}}}
{{{css(https://fonts.googleapis.com/css?family=Open+Sans:400\,300\,800)}}}
{{{css(https://fonts.googleapis.com/css?family=Fira+Mono)}}}
{{{css(./assets/css/main.css)}}}
{{{css(./assets/css/overrides.css)}}}
{{{css(./assets/fontello/fontello.css)}}}

#+HTML: <div class="page-header">
@@html:   <div class="page-meta small">Document last updated@@ {{{time(%Y-%m-%d %a %H:%M)}}}@@html:</div>@@
#+HTML:   <h1>D3 <em>Foresight</em></h1>
#+HTML: </div>

{{{badge(https://travis-ci.org/reichlab/d3-foresight,https://img.shields.io/travis/reichlab/d3-foresight/master.svg?style=for-the-badge)}}}
{{{badge(https://www.npmjs.com/package/d3-foresight,https://img.shields.io/npm/v/d3-foresight.svg?style=for-the-badge)}}}
{{{badge(https://www.npmjs.com/package/d3-foresight,https://img.shields.io/npm/l/d3-foresight.svg?style=for-the-badge)}}}
{{{badge(https://github.com/reichlab/d3-foresight/issues,https://img.shields.io/github/issues/reichlab/d3-foresight.svg?style=for-the-badge)}}}

{{{badge(https://github.com/feross/standard,https://cdn.rawgit.com/feross/standard/master/badge.svg)}}}

D3 Foresight is a [[https://github.com/d3/d3][d3]] based library for visualizing time series forecasts. At a
/time point/, a general time series model trying to predict a single variable
series (like temperature) makes forecasts for some time points in the future
with some uncertainty described by probability distributions. Other than these
predictions, it might also provide an estimate of /peak/ and some /onset/outbreak/
point (as defined by a baseline). This visualizations in this library try to
cover these cases. See [[http://reichlab.io/flusight][reichlab/flusight]] for a demo.

#+TOC: headlines 2

* Setting up

~d3-foresight~ requires [[https://d3js.org/][d3]] and [[https://momentjs.com][momentjs]] as external dependencies. To build
d3-foresight itself, use ~npm compile~ (for ~./dist/d3-foresight.js~) or ~npm build~
(for ~./dist/d3-foresight.min.js~). The library is also available on npm as
[[https://www.npmjs.com/package/d3-foresight][d3-foresight]]. In browser, include these in your html:

#+BEGIN_EXAMPLE
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
<script src="./dist/d3-foresight.min.js"></script>
#+END_EXAMPLE

Additionally, a few icons (in the legend) have an icon font dependency. The css
for that can be added using:

#+BEGIN_EXAMPLE
<link rel="stylesheet" href="./assets/fontello/fontello.css" />
#+END_EXAMPLE

* TimeChart

This visualizes prediction of time series by some models upto a provided number
of time steps in future at each step of time. Basic usage instruction follows:

#+BEGIN_SRC js :tangle script.js
  document.addEventListener("DOMContentLoaded", function (event) {
    let timeChartOptions = {
      pointType: 'mmwr-week'
    }

    let timeChart = new d3Foresight.TimeChart('#timechart', timeChartOptions)

    let data = {
      timePoints: [
        { week: 20, year: 2016 },
        { week: 21, year: 2016 },
        { week: 22, year: 2016 },
        { week: 23, year: 2016 },
        { week: 24, year: 2016 },
      ],
      actual: [1.1, 1.3, 1.4, 1.3, 1.1],
      models: [
        {
          id: 'mod',
          meta: {
            name: 'Name',
            description: 'Model description here',
            url: 'http://github.com'
          },
          predictions: [
            null,
            {
              series: [
                { point: 1.5 },
                { point: 1.5 },
              ]
            },
            {
              series: [
                { point: 1.5 },
                { point: 1.5 },
              ]
            },
            null,
            null
          ]
        }
      ]
    }
    timeChart.plot(data)

    window.tc = timeChart
    // For updating the current position of displayed predictions
    // timeChart.update(0)
    // Or simply
    // timeChart.moveForward()
    // timeChart.moveBackward()
  })
#+END_SRC

#+HTML: <div>
#+HTML:   <div id="timechart"></div>
#+HTML: </div>

* TODO DistributionChart
* Hooks

Charts can call user defined functions when movement events are triggered inside
(e.g. by clicking on movement buttons or clicking on the overlay). To register
your functions to be called on these events, you can use ~addHook~.

#+BEGIN_SRC js
  timeChart.addHook(d3Foresight.events.FORWARD_INDEX, () => {
    // This is triggered when an event moves the
    // visualization forward in time one tick
    console.log('chart moved forward')
  })

  timeChart.addHook(d3Foresight.events.BACKWARD_INDEX, () => {
    // This is triggered when an event moves the
    // visualization backward in time one tick
    console.log('chart moved backward')
  })

  timeChart.addHook(d3Foresight.events.JUMP_TO_INDEX, (index) => {
    // This is triggered when an event moves the
    // visualization to certain `index` in `timePoints`
    console.log('chart moved to ' + index)
  })
#+END_SRC

~addHook~ returns a subscription token which can then be used to revoke that
hook using ~removeHook~.

#+BEGIN_SRC js
  let token = timeChart.addHook(
    d3Foresight.events.BACKWARD_INDEX,
    () => console.log('went back')
  )
  timeChart.removeHook(token)
#+END_SRC
