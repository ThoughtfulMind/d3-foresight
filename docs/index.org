#+TITLE: D3-foresight documentation

#+OPTIONS: toc:nil title:nil
#+MACRO: js #+HTML_HEAD: <script src="$1"></script>
#+MACRO: css #+HTML_HEAD: <link rel="stylesheet" href="$1" />
#+MACRO: badge @@html:<a href="$1" class="image-link"><img src="$2" /></a>@@

{{{js(https://d3js.org/d3.v4.min.js)}}}
{{{js(https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js)}}}
{{{js(./assets/d3-foresight.js)}}}
{{{js(./assets/script.js)}}}

{{{css(https://fonts.googleapis.com/css?family=Merriweather:900\,900italic\,300\,300italic)}}}
{{{css(https://fonts.googleapis.com/css?family=Open+Sans:400\,300\,800)}}}
{{{css(https://fonts.googleapis.com/css?family=Fira+Mono)}}}
{{{css(./assets/css/main.css)}}}
{{{css(./assets/css/overrides.css)}}}
{{{css(./assets/fontello/fontello.css)}}}

#+HTML: <div class="page-header">
@@html:   <div class="page-meta small">Document last updated@@ {{{time(%Y-%m-%d %a %H:%M)}}}@@html:</div>@@
#+HTML:   <h1>D3 <em>Foresight</em></h1>
#+HTML: </div>

{{{badge(https://travis-ci.org/reichlab/d3-foresight,https://img.shields.io/travis/reichlab/d3-foresight/master.svg?style=for-the-badge)}}}
{{{badge(https://www.npmjs.com/package/d3-foresight,https://img.shields.io/npm/v/d3-foresight.svg?style=for-the-badge)}}}
{{{badge(https://www.npmjs.com/package/d3-foresight,https://img.shields.io/npm/l/d3-foresight.svg?style=for-the-badge)}}}
{{{badge(https://github.com/reichlab/d3-foresight/issues,https://img.shields.io/github/issues/reichlab/d3-foresight.svg?style=for-the-badge)}}}

{{{badge(https://github.com/feross/standard,https://cdn.rawgit.com/feross/standard/master/badge.svg)}}}

Pellentesque dapibus suscipit ligula.  Donec posuere augue in quam.  Etiam vel
tortor sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac
leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu,
wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in
ligula mollis ultricies.  Integer placerat tristique nisl.  Praesent augue.
Fusce commodo.  Vestibulum convallis, lorem a tempus semper, dui dui euismod
elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat
quis, varius et, dictum id, arcu.  Mauris mollis tincidunt felis.  Aliquam
feugiat tellus ut neque.  Nulla facilisis, risus a rhoncus fermentum, tellus
tellus lacinia purus, et dictum nunc justo sit amet elit

#+TOC: headlines 2

* Quickstart

~d3-foresight~ needs [[https://d3js.org/][d3]] and [[https://momentjs.com][momentjs]]. Include these in your html:

#+BEGIN_EXAMPLE
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>

<!-- Get the js file from ./dist/d3-foresight.min.js. The package is also -->
<!-- available in npm -->
<script src="./d3-foresight.min.js"></script>
#+END_EXAMPLE

** TimeChart

This visualizes prediction of time series by some models upto a provided number
of time steps in future at each step of time. Basic usage instruction follows:

#+BEGIN_SRC js :tangle script.js
  document.addEventListener("DOMContentLoaded", function (event) {
    let timeChartOptions = {
      pointType: 'mmwr-week'
    }

    let timeChart = new d3Foresight.TimeChart('#timechart', timeChartOptions)

    let data = {
      timePoints: [
        { week: 20, year: 2016 },
        { week: 21, year: 2016 },
        { week: 22, year: 2016 },
        { week: 23, year: 2016 },
        { week: 24, year: 2016 },
      ],
      actual: [1.1, 1.3, 1.4, 1.3, 1.1],
      models: [
        {
          id: 'mod',
          meta: {
            name: 'Name',
            description: 'Model description here',
            url: 'http://github.com'
          },
          predictions: [
            null,
            {
              series: [
                { point: 1.5 },
                { point: 1.5 },
              ]
            },
            {
              series: [
                { point: 1.5 },
                { point: 1.5 },
              ]
            },
            null,
            null
          ]
        }
      ]
    }
    timeChart.plot(data)

    window.tc = timeChart
    // For updating the current position of displayed predictions
    // timeChart.update(0)
    // Or simply
    // timeChart.moveForward()
    // timeChart.moveBackward()
  })
#+END_SRC

#+HTML: <div>
#+HTML:   <div id="timechart"></div>
#+HTML: </div>

** DistributionChart

This visualizes probability distribution of the model outputs.

```js
let distributionChart = new DistributionChart('#target-div')
  
// TODO: Description of data
distributionChart.plot(data)
```

* Hooks

The charts can call user defined hooks when movement events are triggered inside
(e.g. by clicking on movement buttons or clicking on the overlay). To register
your custom functions to be called on these events, you can `addHook` (this
doesn't overwrite already added hooks, so its safe in that sense).

```js
timeChart.addHook('forward-index', () => {
  // This is triggered when an event moved the visualization forward in time
  console.log('chart moved forward')
})

timeChart.addHook('backward-index', () => {
  // This is triggered when an event moved the visualization backward in time
  console.log('chart moved backward')
})

timeChart.addHook('jump-to-index', (index) => {
  // This is triggered when an event moved the visualization to certain discrete `index` in time
  console.log('chart moved to ' + index)
})
```
